name: Build Kernels
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      uploading:
        type: string
      reference:
        type: string
    secrets:
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true
      GPG_KEY2:
        required: true
      GPG_PASSPHRASE2:
        required: true
      SCRIPTS_ACCESS_TOKEN:
        required: true
      KEY_TORRENTS:
        required: true
      KNOWN_HOSTS_UPLOAD:
        required: true
jobs:

  Prepare:
    runs-on: ${{ inputs.runner }}
    name: "Looking for changes"
    if: ${{ github.repository_owner == 'Armbian' }}
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: false

      - name: Checkout support scripts
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/scripts
          path: scripts
          clean: false
          
      - name: Cache build parameters
        uses: actions/cache@v2
        env:
          cache-name: build-kernel
        with:
          path: build-kernel
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}


      - name: Determine changed kernels
        id: list_dirs
        run: |

          # fake function
          enable_extension ()
          {
          return 0
          }

          BOOTCONFIG=true
          BETA=yes

          MATRIX=$(for BRANCH in legacy current edge; do
              FILES=$(cat build/config/targets*.conf | grep $BRANCH | grep -v "^$" | grep -v "^#" | sed -n $LINE'p' | cut -d " " -f1 | uniq)
              while IFS= read -r line; do
                  unset LINUXFAMILY KERNELPATCHDIR LINUXCONFIG KERNELSOURCE
                  BOARDFAMILY=$(cat build/config/boards/$line.* | grep BOARDFAMILY | cut -d'"' -f2)
                  source "build/config/sources/families/${BOARDFAMILY}.conf"
                  # exceptions handling
                  [[ ${BOARDFAMILY} == *x86 ]] && BOARDFAMILY=x86
                  [[ ${BOARDFAMILY} == *arm64 ]] && BOARDFAMILY=arm64
                  [[ ${BOARDFAMILY} == sun*i ]] && BOARDFAMILY=sunxi
                  [[ ${BOARDFAMILY} == sun8i-v3s ]] && BOARDFAMILY=sunxi
                  [[ ${BOARDFAMILY} == sun*iw* && ${BRANCH} != legacy ]] && BOARDFAMILY=sunxi64
                  [[ ${BOARDFAMILY} == meson8b ]] && BOARDFAMILY=meson
                  [[ ${BOARDFAMILY} == meson-* || ${BOARDFAMILY} == jethub ]] && BOARDFAMILY=meson64
                  [[ ${BOARDFAMILY} == rk3399 && ${BRANCH} != legacy ]] && BOARDFAMILY=rockchip64
                  source "build/config/sources/${ARCH}.conf"
                  ref_type=${KERNELBRANCH%%:*}
                  if [[ $ref_type == head ]]; then
                      ref_name=HEAD
                  else
                      ref_name=${KERNELBRANCH##*:}
                  fi
                  [[ -z $LINUXFAMILY ]] && LINUXFAMILY=$BOARDFAMILY
                  [[ -z ${KERNELPATCHDIR} ]] && KERNELPATCHDIR=$LINUXFAMILY-$BRANCH
                  [[ -z ${LINUXCONFIG} ]] && LINUXCONFIG=linux-$LINUXFAMILY-$BRANCH
                  [[ -z ${KERNELSOURCE} ]] && KERNELSOURCE="https://kernel.googlesource.com/pub/scm/linux/kernel/git/stable/linux-stable"

                  hash_watch_1=$(LC_COLLATE=C find -L "build/patch/kernel/${KERNELPATCHDIR}"/ -name '*.patch' -mindepth 1 -maxdepth 1 -printf '%s %P\n' 2> /dev/null | LC_COLLATE=C sort -n)
                  hash_watch_2=$(cat "build/config/kernel/${LINUXCONFIG}.config" 2> /dev/null)
                  patch_hash=$(echo "${hash_watch_1}${hash_watch_2}" | git hash-object --stdin)
                  case $ref_type in
                      branch) hash=$(git ls-remote "${KERNELSOURCE}" refs/heads/"${ref_name}" 2> /dev/null | awk '{print $1}') ;;
                      tag) hash=$(git ls-remote "${KERNELSOURCE}" tags/"${ref_name}" 2> /dev/null | awk '{print $1}') ;;
                      head) hash=$(git ls-remote "${KERNELSOURCE}" HEAD 2> /dev/null | awk '{print $1}') ;;
                      commit) hash=$ref_name ;;
                  esac
                  # ignore diff checking in case of network errrors
                  kernel_hash="scripts/hash"$([[ ${BETA} == yes ]] && echo "-beta")"/linux-image-${BRANCH}-${LINUXFAMILY}.githash"
                  if [[ "$hash" != "$(head -1 "${kernel_hash}" 2>/dev/null)" || "$patch_hash" != "$(tail -1 "${kernel_hash}" 2>/dev/null)" ]]; then
                      echo "$line:$BRANCH:${BOARDFAMILY}"
                  fi
                  done <<< "$FILES"
          done | sort -u -t: -k3,3 )
          
          mkdir -p build-kernel
          echo "no" > build-kernel/skip
          if [[ -z "$MATRIX" ]]; then              
              echo "yes" > build-kernel/skip
          fi 
          echo ::set-output name=matrix::$(for x in $(echo "${MATRIX}"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)

  gcc:

    needs: [ Prepare ]
    runs-on: ${{ inputs.runner }}
    if: ${{ needs.Prepare.outputs.matrix != '[]' && needs.Prepare.outputs.matrix != '' }}
    timeout-minutes: 480
    strategy:
      fail-fast: false
      matrix: 
        node: ${{fromJson(needs.Prepare.outputs.matrix)}}

    steps:
   
      - name: Checkout Armbian support scripts
        
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/scripts
          path: scripts
          clean: false
          
      - name: Checkout Armbian build script
        
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref:  ${{ inputs.reference }}
          clean: false

      - name: Cache Gradle packages        
        uses: actions/cache@v2
        env:
          cache-name: build-kernel
        with:
          path: build-kernel
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}-linux
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}-linux 
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}

      - name: Clean cache
        run: |
          sudo rm -r build-kernel/*

      - name: Install SSH key for storage
        
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_TORRENTS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
          if_key_exists: replace

      - name: Fix permissions
        
        run: |

          # make sure no temporally dirs are mounted from previous runs
          while :
          do
              sudo pkill compile.sh || true
              sudo pkill arm-binfmt-P || true
              sudo pkill aarch64-binfmt-P || true
              sudo pkill pixz || true
              sudo mountpoint -q build/output/images && sudo fusermount -u build/output/images || true
              sudo mountpoint -q build/output/debs && sudo fusermount -u build/output/debs || true
              sudo mountpoint -q build/output/debs-beta && sudo fusermount -u build/output/debs-beta || true
              [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 && $(sudo mountpoint -q build/output/images; echo $?) -eq 1 ]] && sudo rm -rf build/.tmp && break
              echo "Mounted temp directories. Trying to unmount."
              df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
              sudo rm -f build/cache/hash/*
              sudo rm -f build/cache/hash-beta/*
              sleep 10
          done
          [[ -d build/.git ]] && sudo chown -R $USER:$USER build/.git || true
          [[ -d build/output/images ]] && sudo rm -rf build/output/images/* || true

      - name: Mount upload folders
        run: |
        
          # use this only on our runners
          if [[ ${{ inputs.runner }} != "ubuntu-latest" ]]; then
          # mount deploy target
          sudo apt-get -y -qq install sshfs
          sudo mkdir -p /root/.ssh/
          sudo cp ~/.ssh/known_hosts /root/.ssh/
          sudo mkdir -p build/output/debs || true
          sudo mkdir -p build/output/debs-beta || true
          sudo sshfs upload@users.armbian.com:/debs build/output/debs -o IdentityFile=~/.ssh/id_rsa -o reconnect,nonempty -o allow_other
          sudo sshfs upload@users.armbian.com:/debs-beta build/output/debs-beta -o IdentityFile=~/.ssh/id_rsa -o reconnect,nonempty -o allow_other
          fi

      - name: Sync
        
        run: |          

          mkdir -p build/userpatches build/cache/hash build/cache/hash-beta
          sudo rm -f build/userpatches/targets.conf
          sudo cp scripts/configs/* build/userpatches/
          sudo rm -r build/cache/hash/* build/cache/hash-beta/* 2> /dev/null

      - name: Pull Docker image
        
        run: |
        
          [[ -z $(command -v docker) ]] && sudo apt-get -yy install docker containerd docker.io
          sudo docker kill $(sudo docker ps -q) 2>/dev/null || true
          sudo docker pull ghcr.io/armbian/build:$(cat build/VERSION | sed 's/trunk.*/trunk/')"-$(dpkg --print-architecture)"

      - name: Build
        
        run: |

          cd build

          if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
             sudo mkdir -p cache/toolchain cache/rootfs || true
             ! sudo mountpoint -q cache/toolchain && sudo mount nas:/tank/armbian/toolchain.armbian.com cache/toolchain -o rsize=32768,wsize=32768,timeo=5,retrans=2,actimeo=60,retry=15 || true
          fi 

          CHUNK="${{ matrix.node }}"
          BOARD=$(echo $CHUNK | cut -d":" -f1)
          BRANCH=$(echo $CHUNK | cut -d":" -f2)          
          FAMILY=$(echo $CHUNK | cut -d":" -f3)
          export TERM=dumb
          
          sudo sed -i "s/-it --rm/-i --rm/" userpatches/config-docker.conf
          [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes 
          ./compile.sh docker \
          ARMBIAN_MIRROR="https://github.com/armbian/mirror/releases/download/" \
          REPOSITORY_INSTALL="u-boot,armbian-bsp-cli,armbian-bsp-desktop,armbian-desktop,armbian-config,armbian-firmware" \
          BOARD="$BOARD" \
          PRIVATE_CCACHE="yes" \
          BETA="yes" \
          KERNEL_ONLY="yes" \
          BRANCH="$BRANCH" \
          KERNEL_CONFIGURE="no" \
          CLEAN_LEVEL="" \
          EXPERT="yes"

          if [[ $? -eq 0 ]]; then
              sudo mkdir -p ../build-kernel              
              cp cache/hash-beta/*.git* ../build-kernel/ 2> /dev/null || true
          fi
          
          echo "FILE_NAME=${BRANCH}-${FAMILY}" >> $GITHUB_ENV
          echo "UPLOAD=true" >> $GITHUB_ENV

      - name: Upload build artifacts

        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FILE_NAME }}
          path: build/output/debs-beta/linux-*${{ env.FILE_NAME }}*
          if-no-files-found: ignore
          retention-days: 30

      - name: Unmount folders
        
        run: |
         
            sudo mountpoint -q build/output/debs && sudo fusermount -u build/output/debs || true
            sudo mountpoint -q build/output/debs-beta && sudo fusermount -u build/output/debs-beta || true
            sudo mountpoint -q build/cache/toolchain && sudo fusermount -u build/cache/toolchain || true
