name: Build with Docker
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      variant:
       required: true
       type: string
      runner:
        required: true
        type: string
      part:
        required: true
        type: number
      uploading:
        type: string
    secrets:
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true
      GPG_KEY2:
        required: true
      GPG_PASSPHRASE2:
        required: true
      SCRIPTS_ACCESS_TOKEN:
        required: true

jobs:

  Prepare:

    name: targets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: false

      - name: Prepare matrix
        id: list_dirs
        run: |
          var="${{ inputs.variant }}"
          if [[ "$var" != *stable ]]; then
            FILENAME="targets-${var%:*}-beta.conf"
          else
            FILENAME="targets.conf | grep ${var%:*}"
          fi
          COMMAND="split --number=l/${{ inputs.part }}/3 <<< \$(cat build/config/${FILENAME} | grep -v \"^\$\" | grep -v \"^#\" |  cut -f1 -d ' ' | pr -t -n3 | tr -s '[:blank:]' ':' | cut -d\":\" -f2,3)"          
          echo ::set-output name=matrix::$(for x in $(eval $COMMAND); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)
       
  image:
    needs: Prepare
    strategy:
      fail-fast: false
      matrix:
        node: ${{fromJson(needs.Prepare.outputs.matrix)}}

    runs-on: ${{ inputs.runner }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: false

      - name: Checkout support scripts
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/scripts
          path: scripts
          clean: false

      - name: Sync
        run: |

          mkdir -p build/userpatches
          sudo cp scripts/configs/* build/userpatches/
          
      - name: Pull Docker image
        run: |

          [[ -z $(command -v docker) ]] && sudo apt-get -yy install docker containerd docker.io
          sudo docker kill $(sudo docker ps -q) 2>/dev/null || true
          sudo docker pull ghcr.io/armbian/build:$(cat build/VERSION | sed 's/trunk.*/trunk/')
          
      - name: Fix permissions
        run: |
          # make sure no temporally dirs are mounted from previous runs
          while :
          do
              sudo docker volume rm $(sudo docker volume ls -q) || true
              sudo pkill compile.sh || true
              sudo pkill arm-binfmt-P || true
              sudo pkill aarch64-binfmt-P || true
              sudo pkill pixz || true
              if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
                  sudo mountpoint -q build/cache/rootfs &&  sudo fusermount -u build/cache/rootfs || true
                  sudo mountpoint -q build/cache/toolchain &&  sudo fusermount -u build/cache/toolchain || true
              fi
              sudo mountpoint -q build/output/images && sudo fusermount -u build/output/images || true
              [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 && $(sudo mountpoint -q build/output/images; echo $?) -eq 1 ]] && sudo rm -rf build/.tmp && break
              echo "Mounted temp directories. Trying to unmount."
              df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
              sleep 10
          done
          [[ -d build/output/debug ]] && sudo rm -rf build/output/debug/* || true
          [[ -d build/.git ]] && sudo chown -R $USER:$USER build/.git || true
          [[ -d build/output/images ]] && sudo rm -rf build/output/images/* || true
         
#      - name: Import GPG key

#        uses: crazy-max/ghaction-import-gpg@v3
#        with:
#          gpg-private-key: ${{ inputs.GPG_KEY1 }}
#          passphrase: ${{ inputs.GPG_PASSPHRASE1 }}
#          workdir: scripts
#          git-user-signingkey: true
#          git-commit-gpgsign: true
        
      - name: Build
        run: |

          export TERM=dumb
          cd build
          
          # use local resources if possible
          if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
              sudo rm -rf cache/toolchain/*
              sudo mkdir -p cache/toolchain build/cache/rootfs || true
              ! sudo mountpoint -q cache/toolchain && sudo mount nas:/tank/armbian/toolchain.armbian.com cache/toolchain -o rsize=32768,wsize=32768,timeo=5,retrans=2,actimeo=60,retry=15 || true
              ! sudo mountpoint -q cache/rootfs && sudo mount nas:/tank/armbian/dl.armbian.com/_rootfs cache/rootfs -o rsize=32768,wsize=32768,timeo=5,retrans=2,actimeo=60,retry=15 || true
          fi
          
          var="${{ inputs.variant }}"
          if [[ "$var" != *stable ]]; then
            FILENAME="targets-${var%:*}-beta.conf"
            FOLDER=nightly
          else
            FILENAME="targets.conf | grep ${var%:*}"
            FOLDER=archive
          fi
          echo "FOLDER=$FOLDER" >> $GITHUB_ENV
          CHUNK="${{ matrix.node }}"
          LINE=$(echo $CHUNK | cut -d":" -f1)
          BOARD=$(echo $CHUNK | cut -d":" -f2)
          echo "BOARD=$BOARD" >> $GITHUB_ENV
          read -r BOARD BRANCH RELEASE BUILD_TARGET BUILD_STABILITY BUILD_IMAGE DESKTOP_ENVIRONMENT DESKTOP_ENVIRONMENT_CONFIG_NAME DESKTOP_APPGROUPS_SELECTED \
          <<< $(cat config/${FILENAME} | grep -v "^$" | grep -v "^#" | sed -n ''$LINE'p')
          DESKTOP_APPGROUPS_SELECTED="${DESKTOP_APPGROUPS_SELECTED//,/ }"
          BUILD_DESKTOP="no"
          BUILD_MINIMAL="no"
          [[ ${BUILD_TARGET} == "desktop" ]] && BUILD_DESKTOP="yes"
          [[ ${BUILD_TARGET} == "minimal" ]] && BUILD_MINIMAL="yes"

          sed -i "s/-it --rm/-i --rm/" userpatches/config-docker.conf          
          ./compile.sh docker \
          BETA="yes" \
          RELEASE="${RELEASE}" \
          KERNEL_ONLY="no" \
          SKIP_EXTERNAL_TOOLCHAINS="yes" \
          DESKTOP_ENVIRONMENT_CONFIG_NAME="$DESKTOP_ENVIRONMENT_CONFIG_NAME" \
          BUILD_DESKTOP="$BUILD_DESKTOP" \
          BUILD_MINIMAL="$BUILD_MINIMAL" \
          DESKTOP_ENVIRONMENT="${DESKTOP_ENVIRONMENT}" \
          KERNEL_CONFIGURE="no" \
          BOARD="$BOARD" \
          BRANCH="$BRANCH" \
          ARMBIAN_CACHE_TOOLCHAIN_PATH="${ARMBIAN_CACHE_TOOLCHAIN_PATH}" \
          ARMBIAN_CACHE_ROOTFS_PATH="${ARMBIAN_CACHE_ROOTFS_PATH}" \
          REPOSITORY_INSTALL="u-boot,kernel,armbian-config,armbian-firmware" \
          DESKTOP_APPGROUPS_SELECTED="$DESKTOP_APPGROUPS_SELECTED" \
          EXPERT="yes"

          # future download URL
          FILE="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/download/${BOARD}/${FOLDER}/$(ls -1 output/images/Armbian_$(cat VERSION)_${BOARD^}_${RELEASE}_${BRANCH}*.img.xz | xargs -n 1 basename)"

          # save upload API calls
          if ! wget -q --spider --timeout=15 --tries=3 --retry-connrefused ${FILE} ; then
              echo "UPLOAD=true" >> $GITHUB_ENV
          fi

      - name: Upload artefacts
        if: inputs.uploading == 'true' && env.UPLOAD == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/output/images/Armbian*
          tag: "${{ env.BOARD }}/${{ env.FOLDER }}"
          overwrite: true
          file_glob: true
          body: "<p align='center'><a href='https://www.armbian.com'><img src='https://raw.githubusercontent.com/armbian/.github/master/profile/tux-two.png' width='400' height='226' alt='Armbian Linux'></a></p>"
