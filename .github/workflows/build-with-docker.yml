name: Build with Docker
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      variant:
       required: true
       type: string
      runner:
        required: true
        type: string
    secrets:
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true
      GPG_KEY2:
        required: true
      GPG_PASSPHRASE2:
        required: true
      SCRIPTS_ACCESS_TOKEN:
        required: true

jobs:

  Prepare:

    name: targets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: true

      - name: Prepare matrix
        id: list_dirs
        run: |

          echo ::set-output name=matrix::$(for x in $(cat build/config/${{ inputs.variant }} | grep -v "^$" | \
          grep -v "^#" |  cut -f1 -d ' ' | pr -t -n3 | tr -s '[:blank:]' ':' | cut -d":" -f2,3); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)
       
  image:
    needs: Prepare
    strategy:
      fail-fast: false
      matrix:
        node: ${{fromJson(needs.Prepare.outputs.matrix)}}

    runs-on: ${{ inputs.runner }}    
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: true

      - name: Checkout support scripts
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/scripts
          path: scripts
          clean: true

      - name: Sync
        run: |

          mkdir -p build/userpatches
          sudo cp scripts/configs/* build/userpatches/
          
      - name: Pull Docker image
        run: |

          sudo docker pull ghcr.io/armbian/build:$(cat build/VERSION | sed 's/trunk.*/trunk/')

#      - name: Import GPG key

#        uses: crazy-max/ghaction-import-gpg@v3
#        with:
#          gpg-private-key: ${{ inputs.GPG_KEY1 }}
#          passphrase: ${{ inputs.GPG_PASSPHRASE1 }}
#          workdir: scripts
#          git-user-signingkey: true
#          git-commit-gpgsign: true

      - name: Build
        run: |

          export TERM=dumb
          cd build
          CHUNK="${{ matrix.node }}"
          LINE=$(echo $CHUNK | cut -d":" -f1)
          BOARD=$(echo $CHUNK | cut -d":" -f2)
          read -r BOARD BRANCH RELEASE BUILD_TARGET BUILD_STABILITY BUILD_IMAGE DESKTOP_ENVIRONMENT DESKTOP_ENVIRONMENT_CONFIG_NAME DESKTOP_APPGROUPS_SELECTED \
          <<< $(cat build/config/${{ inputs.variant }} | grep -v "^$" | grep -v "^#" | sed -n ''$LINE'p')
          DESKTOP_APPGROUPS_SELECTED="${DESKTOP_APPGROUPS_SELECTED//,/ }"
          BUILD_DESKTOP="no"
          BUILD_MINIMAL="no"
          [[ ${BUILD_TARGET} == "desktop" ]] && BUILD_DESKTOP="yes"
          [[ ${BUILD_TARGET} == "minimal" ]] && BUILD_MINIMAL="yes"

          sed -i "s/-it --rm/-i --rm/" userpatches/config-docker.conf          
          ./compile.sh docker \
          BETA="yes" \
          RELEASE="${RELEASE}" \
          KERNEL_ONLY="no" \
          SKIP_EXTERNAL_TOOLCHAINS="yes" \
          DESKTOP_ENVIRONMENT_CONFIG_NAME="$DESKTOP_ENVIRONMENT_CONFIG_NAME" \
          BUILD_DESKTOP="$BUILD_DESKTOP" \
          BUILD_MINIMAL="$BUILD_MINIMAL" \
          DESKTOP_ENVIRONMENT="${DESKTOP_ENVIRONMENT}" \
          KERNEL_CONFIGURE="no" \
          BOARD="$BOARD" \
          BRANCH="$BRANCH" \
          REPOSITORY_INSTALL="u-boot,kernel,armbian-config,armbian-firmware" \
          DESKTOP_APPGROUPS_SELECTED="$DESKTOP_APPGROUPS_SELECTED" \
          EXPERT="yes"

      - name: Upload artefacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/output/images/Armbian*
          tag: "${BOARD}/archive"
          overwrite: true
          file_glob: true
          body: "<p align='center'><a href='https://www.armbian.com'><img src='https://raw.githubusercontent.com/armbian/.github/master/profile/tux-two.png' width='400' height='226' alt='Armbian Linux'></a></p>"
