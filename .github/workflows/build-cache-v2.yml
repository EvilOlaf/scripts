name: Build with Docker
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      sourcerepo:
       required: true
       type: string
      variant:
       required: true
       type: string
      runner:
        required: true
        type: string
      part:
        required: true
        type: number
      of:
        required: true
        type: number
      include:
        required: false
        type: string
      exclude:
        required: false
        type: string
      uploading:
        type: string
    secrets:
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true
      GPG_KEY2:
        required: true
      GPG_PASSPHRASE2:
        required: true
      SCRIPTS_ACCESS_TOKEN:
        required: true
      SSH_KEY_TORRENTS: 
        required: true
      KNOWN_HOSTS_UPLOAD:
        required: true

jobs:

  Prepare:

    name: targets
    runs-on: self-hosted
    outputs:
    
      runner:   ${{steps.list_dirs.outputs.runner}}
      board:    ${{steps.list_dirs.outputs.board}}
      release:  ${{steps.list_dirs.outputs.release}}
      variant:  ${{steps.list_dirs.outputs.variant}}
      desktop:  ${{steps.list_dirs.outputs.desktop}}
      appgroup: ${{steps.list_dirs.outputs.appgroup}}
      
    steps:

      - name: Runner cleanup
        uses: igorpecovnik/freespace@main

      - name: Check disks
        run: |
        
          df
           
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 10
          repository: armbian/build
          path: build
          clean: false

      - name: Prepare matrix
        id: list_dirs
        run: |

          # default values
          echo ::set-output name=runner::$(echo 'X64') || true
          echo ::set-output name=release::$(echo '[""]' | jq) || true
          
          echo ::set-output name=variant::$(echo '[""]' | jq) || true
          echo ::set-output name=desktop::$(echo '[""]' | jq) || true
          echo ::set-output name=appgroup::$(echo '[""]' | jq) || true
      
          CHUNK=${{ inputs.variant }}
          VAR=$(echo $CHUNK | cut -d":" -f1)
          ARC=$(echo $CHUNK | cut -d":" -f2)
          echo ::set-output name=board::$(echo $ARC) || true
          
          echo "$VAR $ARC"

          echo ::set-output name=release::$(for x in $(grep -rw build/config/distributions/*/ -e 'supported' | cut -d"/" -f4); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true

          if [[ $VAR == desktop* ]]; then 
          echo ::set-output name=desktop::$(for x in $(grep -rw build/config/desktop/*/environments/*/support -e 'supported'  | cut -d"/" -f6 | sort | uniq); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          echo ::set-output name=variant::$(for x in $(seq -w 01 03); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          fi
          
          if [[ $VAR == cli* ]]; then 
          echo ::set-output name=variant::$(for x in $(echo "cli_1 cli_2"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          #else
          #echo ::set-output name=variant::$(for x in $(echo "na"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          fi
          
          #[[ $VAR == cli* ]] && echo ::set-output name=desktop::$(echo '[]' | jq) || true
          #$if [[ $ARC == arm* ]] && echo ::set-output name=runner::$(echo '["ARM64" , "X64","ubuntu-latest"]' | jq) || true
          #if [[ $ARC == x86 ]] && echo ::set-output name=runner::$(echo '["X64","ubuntu-latest"]' | jq) || true
          
          
          #MATRIX="seq -w 01 10"
          #echo ::set-output name=release::$(for x in $(eval $MATRIX); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)
          #echo ::set-output name=variant::$(for x in $(eval $MATRIX); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)
          #[[ $BOARD == cli* ]] && echo ::set-output name=variant::$(echo '["minimal","server"]' | jq) || true
          #runners=("small" "ubuntu-latest" "big")
          #selectedrunner=$(printf "%s\n" "${runners[@]}" | shuf -n1)
          #echo ::set-output name=runner::$(for x in $(echo $selectedrunner); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          
          # Let's choose runners wisely          
          [[ $ARC == arm* ]]                                         && echo ::set-output name=runner::$(echo 'ARM64')         || true
          [[ $VAR == desktop ]]                                      && echo ::set-output name=runner::$(echo 'small')         || true
          [[ ( $VAR == min || $VAR == srv ) && $ARC == x86 ]] && echo ::set-output name=runner::$(echo 'ubuntu-latest') || true

  image:
  
    needs: Prepare
    strategy:
      fail-fast: false
      matrix:
      
        release: ${{fromJson(needs.Prepare.outputs.release)}}
        variant: ${{fromJson(needs.Prepare.outputs.variant)}}
        desktop: ${{fromJson(needs.Prepare.outputs.desktop)}}
        appgroup: ${{fromJson(needs.Prepare.outputs.appgroup)}}

    runs-on: ["${{ needs.Prepare.outputs.runner }}"]
    steps:

      - name: Runner cleanup
        uses: igorpecovnik/freespace@main

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          path: build
          clean: false

      - name: Checkout support scripts
        uses: actions/checkout@v3
        with:
          repository: armbian/scripts
          path: scripts
          clean: false

      - name: Copy templates
        run: |

          mkdir -p build/userpatches
          sudo cp scripts/configs/* build/userpatches/

      - name: Pull Docker image
        run: |

          [[ -z $(command -v docker) ]] && sudo apt-get -yy install docker containerd docker.io
          sudo docker kill $(sudo docker ps -q) 2>/dev/null || true          
          sudo docker image rm $(sudo docker images | grep -v $(cat build/VERSION | sed 's/trunk.*/trunk/')"-$(dpkg --print-architecture)" | grep armbian | awk 'NR>1 {print $3}') 2> /dev/null || true 
          sudo docker pull ghcr.io/armbian/build:$(cat build/VERSION  | cut -d"." -f1-2)"-$(dpkg --print-architecture)"

      - name: Install SSH key for storage        
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY_TORRENTS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
          if_key_exists: replace

      - name: Mount upload folders
        run: |

          sudo mountpoint -q build/cache/rootfs && sudo fusermount -u build/cache/rootfs || true
          sudo apt-get -y -qq install sshfs
          sudo mkdir -p /root/.ssh/
          sudo cp ~/.ssh/* /root/.ssh/          
          sudo mkdir -p build/cache/rootfs || true
          sudo sshfs upload@users.armbian.com:/rootfs build/cache/rootfs -o IdentityFile=~/.ssh/id_rsa -o reconnect,nonempty -o allow_other
          sudo df

      - name: Generate rootfs
        run: |

          case "${{ matrix.variant }}" in
          1)
              DESKTOP_APPGROUPS_SELECTED="3dsupport"
          ;;
          
          2)
              DESKTOP_APPGROUPS_SELECTED="3dsupport browsers"
          ;;
          3)
          
              DESKTOP_APPGROUPS_SELECTED="3dsupport browsers chat desktop_tools editors email internet languages multimedia office programming remote_desktop"
          ;;
          
          *)
              DESKTOP_APPGROUPS_SELECTED=""
          ;;
          esac
         
          cd build
          BUILD_DESKTOP="no"
          BUILD_MINIMAL="no"
          [[ -n "${{ matrix.desktop }}" ]] && BUILD_DESKTOP="yes"
          
          sudo sed -i "s/-it --rm/-i --rm/" userpatches/config-docker.conf          
          ./compile.sh docker \
          BETA="no" \
          ROOT_FS_CREATE_ONLY="force" \
          RELEASE="${{ matrix.release }}" \
          KERNEL_ONLY="no" \
          SKIP_EXTERNAL_TOOLCHAINS="yes" \
          IGNORE_UPDATES="yes" \
          SYNC_CLOCK="no" \
          DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base" \
          BUILD_DESKTOP="$BUILD_DESKTOP" \
          BUILD_MINIMAL="$BUILD_MINIMAL" \
          DESKTOP_ENVIRONMENT="${{ matrix.desktop }}" \
          KERNEL_CONFIGURE="no" \
          BOARD="${{ needs.Prepare.outputs.board }}" \
          OFFLINE_WORK="yes" \
          LOG_SUBPATH="debug/$BOARD" \
          BRANCH="current" \
          MAKE_FOLDERS="$MAKE_FOLDERS" \
          FORCED_MONTH_OFFSET="${FORCED_MONTH_OFFSET}" \
          IMAGE_PRESENT="no" \
          BUILD_ALL="yes" \
          USE_TORRENT="no" \
          CUSTOM_UBUNTU_MIRROR="si.archive.ubuntu.com/ubuntu" \
          USE_MAINLINE_GOOGLE_MIRROR="yes" \
          ARMBIAN_CACHE_TOOLCHAIN_PATH="${ARMBIAN_CACHE_TOOLCHAIN_PATH}" \
          ARMBIAN_CACHE_ROOTFS_PATH="${ARMBIAN_CACHE_ROOTFS_PATH}" \
          REPOSITORY_INSTALL="u-boot,kernel,bsp,armbian-config,armbian-firmware" \
          DESKTOP_APPGROUPS_SELECTED="$DESKTOP_APPGROUPS_SELECTED" \
          EXPERT="yes"

      - name: Unmount folders

        run: |
        
          sudo mountpoint -q build/cache/rootfs && sudo fusermount -u build/cache/rootfs || true
