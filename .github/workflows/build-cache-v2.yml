name: Build with Docker
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      variant:
       required: true
       type: string
    secrets:
      PAT1:
        required: true
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true
      GPG_KEY2:
        required: true
      GPG_PASSPHRASE2:
        required: true
      SCRIPTS_ACCESS_TOKEN:
        required: true
      SSH_KEY_TORRENTS: 
        required: true
      KNOWN_HOSTS_UPLOAD:
        required: true

jobs:

  Prepare:

    name: targets
    runs-on: self-hosted
    outputs:
    
      runner:   ${{steps.list_dirs.outputs.runner}}
      board:    ${{steps.list_dirs.outputs.board}}
      release:  ${{steps.list_dirs.outputs.release}}
      variant:  ${{steps.list_dirs.outputs.variant}}
      desktop:  ${{steps.list_dirs.outputs.desktop}}
      appgroup: ${{steps.list_dirs.outputs.appgroup}}
      
    steps:

      - name: Runner cleanup
        uses: igorpecovnik/freespace@main
          
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 10
          repository: armbian/build
          path: build
          clean: false

      - name: Prepare matrix
        id: list_dirs
        run: |

          CHUNK=${{ inputs.variant }} # desktop uefi-x86
          VAR=$(echo $CHUNK | cut -d":" -f1)
          ARC=$(echo $CHUNK | cut -d":" -f2)
          echo ::set-output name=board::$(echo $ARC) || true
          
          echo "$VAR $ARC"

          echo ::set-output name=release::$(for x in $(grep -rw build/config/distributions/*/ -e 'supported' | cut -d"/" -f4 | sed '/buster\|sid/d'); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          echo ::set-output name=desktop::$(for x in $(echo "none"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          echo ::set-output name=appgroup::$(for x in $(echo "none"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          
          if [[ $VAR == desktop* ]]; then
          echo ::set-output name=desktop::$(for x in $(grep -rw build/config/desktop/*/environments/*/support -e 'supported'  | cut -d"/" -f6 | sort | uniq); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
              if [[ $ARC == tinkerboard ]]; then
              echo ::set-output name=desktop::$(for x in $(find build/config/desktop/*/environments/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e "{}/only_for" ';' -print | xargs -I{} grep -rw -e 'supported' {} | cut -d"/" -f6 | sort | uniq); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
              fi
          echo ::set-output name=appgroup::$(for x in $(seq -w 01 03); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true
          fi
          
          # passing minimal, server or desktop
          echo ::set-output name=variant::$(for x in $(echo $VAR); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) || true          
          
          # Let's choose runners wisely
          echo ::set-output name=runner::$(echo 'ubuntu-latest') || true # default
          #[[ $VAR != desktop && $ARC == *arm* ]] && echo ::set-output name=runner::$(echo 'ubuntu-latest') || true
          #[[ $VAR == desktop ]]  && echo ::set-output name=runner::$(echo 'small') || true
          runner=("small" "small" "ubuntu-latest")
          [[ $VAR == desktop && $ARC == uefi-arm64 ]] && echo ::set-output name=runner::$(printf "%s\n" "${runner[@]}" | shuf -n1) || true

  image:
  
    needs: Prepare
    strategy:
      fail-fast: false
      matrix:
      
        release: ${{fromJson(needs.Prepare.outputs.release)}}
        variant: ${{fromJson(needs.Prepare.outputs.variant)}}
        desktop: ${{fromJson(needs.Prepare.outputs.desktop)}}
        appgroup: ${{fromJson(needs.Prepare.outputs.appgroup)}}

    runs-on: ["${{ needs.Prepare.outputs.runner }}"]
    steps:

      - name: Runner cleanup
        uses: igorpecovnik/freespace@main

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          fetch-depth: 1
          path: build
          clean: false

      - name: Checkout support scripts
        uses: actions/checkout@v3
        with:
          repository: armbian/scripts
          fetch-depth: 1
          path: scripts
          clean: false

      - name: Checkout tracker lists
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: ngosang/trackerslist
          path: trackerslist
          clean: false

      - name: Copy templates
        run: |

          mkdir -p build/userpatches
          sudo cp scripts/configs/* build/userpatches/

      - name: Pull Docker image
        run: |

          [[ -z $(command -v docker) ]] && sudo apt-get -yy install docker containerd docker.io
          sudo docker kill $(sudo docker ps -q) 2>/dev/null || true          
          sudo docker image rm $(sudo docker images | grep -v $(cat build/VERSION | sed 's/trunk.*/trunk/')"-$(dpkg --print-architecture)" | grep armbian | awk 'NR>1 {print $3}') 2> /dev/null || true 
          sudo docker pull ghcr.io/armbian/build:$(cat build/VERSION  | cut -d"." -f1-2)"-$(dpkg --print-architecture)"

      - name: Install SSH key for storage
        uses: shimataro/ssh-key-action@v2
        with:
        
          key: ${{ secrets.SSH_KEY_TORRENTS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
          if_key_exists: replace

      - name: Mount upload folders
        run: |

          sudo mountpoint -q build/cache/rootfs && sudo fusermount -u build/cache/rootfs || true
          sudo mountpoint -q build/cache/rootfs.upload && sudo fusermount -u build/cache/rootfs.upload || true
          sudo apt-get -y -qq install sshfs
          sudo mkdir -p /root/.ssh/
          sudo cp ~/.ssh/* /root/.ssh/    
          sudo mkdir -p build/cache/rootfs.upload || true
          if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
              echo "Mounting NFS share"
              sudo mount nas:/tank/armbian/users.armbian.com/upload/rootfs build/cache/rootfs.upload
          else
              echo "Mounting SSH share"
              sudo sshfs upload@users.armbian.com:/rootfs build/cache/rootfs.upload -o IdentityFile=~/.ssh/id_rsa -o reconnect -o allow_other || true
          fi
          # remove true when all runners are on jammy
          sudo df

      - name: Generate rootfs
        run: |

          if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
             CUSTOM_UBUNTU_MIRROR="si.archive.ubuntu.com/ubuntu"
             else
             CUSTOM_UBUNTU_MIRROR="us.archive.ubuntu.com/ubuntu"
          fi

          DESKTOP_APPGROUPS=${{ matrix.appgroup }}
          case "$DESKTOP_APPGROUPS" in
          "01")
              DESKTOP_APPGROUPS_SELECTED="3dsupport"
          ;;
          
          "02")
              DESKTOP_APPGROUPS_SELECTED="3dsupport browsers"
          ;;
          "03")
          
              DESKTOP_APPGROUPS_SELECTED="3dsupport browsers chat desktop_tools editors email internet multimedia office programming remote_desktop"
          ;;
          
          *)
              DESKTOP_APPGROUPS_SELECTED=""
          ;;
          esac

          echo $HOME

          cd build
          BUILD_DESKTOP="no"
          BUILD_MINIMAL="no"
          DESKTOP_ENVIRONMENT="${{ matrix.desktop }}"
          [[ "${{ matrix.desktop }}" == "none" ]] && DESKTOP_ENVIRONMENT=""
          [[ -n "$DESKTOP_ENVIRONMENT" ]] && BUILD_DESKTOP="yes"
          [[ "${{ matrix.variant }}" == minimal ]] && BUILD_MINIMAL="yes"
          #GPG_PASS="${{ secrets.GPG_PASSPHRASE1 }}" 
          sudo sed -i "s/-it --rm/-i --rm/" userpatches/config-docker.conf          
          ./compile.sh docker \
          BETA="no" \
          ROOT_FS_CREATE_ONLY="yes" \
          RELEASE="${{ matrix.release }}" \
          KERNEL_ONLY="no" \
          SKIP_EXTERNAL_TOOLCHAINS="yes" \
          IGNORE_UPDATES="yes" \
          SYNC_CLOCK="no" \
          DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base" \
          BUILD_DESKTOP="$BUILD_DESKTOP" \
          BUILD_MINIMAL="$BUILD_MINIMAL" \
          DESKTOP_ENVIRONMENT="$DESKTOP_ENVIRONMENT" \
          KERNEL_CONFIGURE="no" \
          BOARD="${{ needs.Prepare.outputs.board }}" \
          OFFLINE_WORK="yes" \
          BRANCH="current" \
          USE_TORRENT="yes" \
          CUSTOM_UBUNTU_MIRROR="${CUSTOM_UBUNTU_MIRROR}" \
          USE_MAINLINE_GOOGLE_MIRROR="yes" \
          REPOSITORY_INSTALL="u-boot,kernel,bsp,armbian-desktop,armbian-config,armbian-firmware" \
          DESKTOP_APPGROUPS_SELECTED="$DESKTOP_APPGROUPS_SELECTED" \
          EXPERT="yes"

      - name: Upload
        uses: ncipollo/release-action@v1
        if: ${{ github.repository_owner == 'Armbian' }}
        with:
          repo: "mirror"
          artifacts: "build/cache/rootfs/*"
          tag: "_rootfs"
          omitBody: true
          omitName: true
          allowUpdates: true
          token: ${{ secrets.PAT1 }}

      - name: Sync
        if: ${{ github.repository_owner == 'Armbian' }}
        run: |

          sudo rsync -ahv --no-o --no-g --no-perms --progress build/cache/rootfs/* build/cache/rootfs.upload

      - name: Unmount folders
        if: ${{ github.repository_owner == 'Armbian' }}
        run: |

          sudo mountpoint -q build/cache/rootfs.upload && sudo fusermount -u build/cache/rootfs.upload || true