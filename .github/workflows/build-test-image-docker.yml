name: Build test images with Docker

on:

  workflow_dispatch:
  workflow_call:

jobs:  

  Distro:
    strategy:
      fail-fast: false
      matrix:
        board: [uefi-x86]
        target: ["debian:bullseye:10","debian:sid:12","ubuntu:focal:8","ubuntu:jammy:12"]
    
    outputs:
      desktop: ${{steps.list_dirs.outputs.desktop}}
 
    runs-on: ubuntu-latest
    name: "Build"    
    steps:

      - name: Read values
        run: |

          DISTRO=$(echo ${{ matrix.target }} | cut -d":" -f1)
          RELEASE=$(echo ${{ matrix.target }} | cut -d":" -f2)
          COMPILER=$(echo ${{ matrix.target }} | cut -d":" -f3)
          
          DOCKER_DISTRO=$DISTRO
          DOCKER_RELEASE=$RELEASE          
          DOCKER_COMPILER=$COMPILER
          
          BOARD=${{ matrix.board }}

          # export to environment
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "BOARD=$BOARD" >> $GITHUB_ENV
          echo "COMPILER=$COMPILER" >> $GITHUB_ENV
          
          echo "DOCKER_DISTRO=$DOCKER_DISTRO" >> $GITHUB_ENV
          echo "DOCKER_RELEASE=$DOCKER_RELEASE" >> $GITHUB_ENV
          echo "DOCKER_COMPILER=$DOCKER_COMPILER" >> $GITHUB_ENV

      - name: Checkout Armbian build script
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          path: build
          fetch-depth: '100'
          clean: false

      - name: Checkout support scripts
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          repository: armbian/scripts
          path: scripts
          clean: true

      - name: Sync
        run: |
          mkdir -p build/userpatches
          sudo cp scripts/configs/lib.config build/userpatches/
          sudo cp scripts/configs/config-default.conf build/userpatches/

      - name: Pull Docker image
        run: |
          sudo docker pull ghcr.io/armbian/build:$(cat build/VERSION  | cut -d"." -f1-2)"-${{ env.DOCKER_RELEASE }}-$(dpkg --print-architecture)"

      - name: Build test image
        run: |

          # change template
          sudo sed -i "s/^#DOCKER_FLAGS+=(--privileged)/DOCKER_FLAGS+=(--privileged)/" userpatches/config-docker.conf
          sudo sed -i "s/^ARM_GCC_COMPILER=.*/ARM_GCC_COMPILER=g++-${{ env.DOCKER_COMPILER }}-arm-linux-gnueabihf/" userpatches/config-docker.conf
          sudo sed -i "s/^BASE_IMAGE=.*/BASE_IMAGE=${{ env.DOCKER_DISTRO }}:${{ env.DOCKER_RELEASE }}/" userpatches/config-docker.conf
          sudo sed -i "s/^VERSION=.*/VERSION=\$(cat \$SRC\/VERSION | cut -d\".\" -f1-2)\"-\$(echo \${BASE_IMAGE} \| cut -d\":\" -f2)-\$(dpkg --print-architecture)\"/" userpatches/config-docker.conf          
          sudo sed -i 's/armbian:/ghcr.io\/armbian\/build:/g' userpatches/config-docker.conf 
          sudo sed -i "s/ -it/ -i/" userpatches/config-docker.conf
          sed -i "s/COMPRESS_OUTPUTIMAGE=.*/COMPRESS_OUTPUTIMAGE=\"no\"/" userpatches/lib.config
          
          export TERM=dumb         
          touch .ignore_changes
          ./compile.sh docker \
          JUST_INIT="no" \
          OFFLINE_WORK="no" \
          BETA=yes \
          EXPERT=yes \
          BOARD=${{ matrix.board }} \
          BRANCH=edge \
          RELEASE=${{ env.RELEASE }} \
          BUILD_MINIMAL=no \
          BUILD_DESKTOP=no \
          KERNEL_ONLY=no \
          KERNEL_CONFIGURE=prebuilt \
          COMPRESS_OUTPUTIMAGE=no \
          IGNORE_UPDATES=yes \
          REPOSITORY_INSTALL="u-boot,kernel" \
          DESKTOP_ENVIRONMENT_CONFIG_NAME="" \
          DESKTOP_ENVIRONMENT="" \
          SKIP_EXTERNAL_TOOLCHAINS=yes \
          
      - name: Upload artefacts        
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.board }}-${{ matrix.release }}"
          path: build/output/images/*
          if-no-files-found: error
          retention-days: 7

      - name: Read
        id: list_dirs
        run: |

          RELEASE=$(echo ${{ matrix.target }} | cut -d":" -f2)
          echo ${{ matrix.target }}
          echo ${RELEASE}
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          MATRIX=$(
          set +e
          releases=($(find build/config/distributions -mindepth 1 -maxdepth 1 -type d | sed 's/.*\///' ))
          for i in ${releases[@]}
          do
          environments=($([[ -d build/config/desktop/${i}/environments ]] && ls -1 build/config/desktop/${i}/environments))
            for j in ${environments[@]}
            do
              echo  "$i:$j"
            done
          done)
          echo ::set-output name=desktop::$(for x in $(echo "${MATRIX}"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) 
          
  Desktop:
  
      needs: [ Distro ]
      name: "Install"
      runs-on: Linux
      timeout-minutes: 480
      strategy:
        max-parallel: 16
        fail-fast: false
        matrix: 
          node: ${{fromJson(needs.Distro.outputs.desktop)}}

      steps:
      
        - uses: igorpecovnik/freespace@main
