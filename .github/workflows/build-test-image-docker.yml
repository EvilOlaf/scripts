name: Build test images with Docker

on:

  workflow_dispatch:
  workflow_call:
    inputs:
      reference:
        required: true
        type: string
      runner:
        required: true
        type: string

jobs:  

  gradle:
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        board: [uefi-x86]
        target: ["debian:bullseye:10","debian:sid:12","ubuntu:jammy:12"]
    
    name: Make
    runs-on: ubuntu-latest
    outputs:    
      release:   ${{steps.gradle.outputs.release}}
    steps:

      - name: Runner prepare
        uses: armbian/actions/runner-prepare@main

      - name: Read values
        run: |

          DISTRO=$(echo ${{ matrix.target }} | cut -d":" -f1)
          RELEASE=$(echo ${{ matrix.target }} | cut -d":" -f2)
          COMPILER=$(echo ${{ matrix.target }} | cut -d":" -f3)
          
          DOCKER_DISTRO=$DISTRO
          DOCKER_RELEASE=$RELEASE          
          DOCKER_COMPILER=$COMPILER
          
          BOARD=${{ matrix.board }}
          
          # Bullseye can't build even itself
          if [[ "$RELEASE" == "bullseye" ]]; then
          DOCKER_DISTRO="ubuntu"
          DOCKER_RELEASE="jammy"
          DOCKER_COMPILER="12"
          fi
          
          if [[ "$DISTRO" == "debian" ]] && [[ "$BOARD" == "rpi4b" ]]; then
             echo "SKIP=yes" >> $GITHUB_ENV
          fi
          
          # export to environment
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "BOARD=$BOARD" >> $GITHUB_ENV
          echo "COMPILER=$COMPILER" >> $GITHUB_ENV
          
          echo "DOCKER_DISTRO=$DOCKER_DISTRO" >> $GITHUB_ENV
          echo "DOCKER_RELEASE=$DOCKER_RELEASE" >> $GITHUB_ENV
          echo "DOCKER_COMPILER=$DOCKER_COMPILER" >> $GITHUB_ENV

      - run: |

          REFERENCE=${{ inputs.reference }}          
          echo "REFERENCE=${REFERENCE:-"nightly"}" >> $GITHUB_ENV

      - name: Checkout repository
        if: ${{ env.SKIP != 'yes' }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          repository: armbian/build
          path: build          
          ref:  ${{ env.REFERENCE }}
          clean: true

      - name: Checkout support scripts
        if: ${{ env.SKIP != 'yes' }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          repository: armbian/scripts
          path: scripts
          clean: true

      - name: Sync
        if: ${{ env.SKIP != 'yes' }}
        run: |

          mkdir -p build/userpatches
          sudo cp scripts/configs/lib.config build/userpatches/
          sudo cp scripts/configs/config-default.conf build/userpatches/
          
      - name: Pull Docker image
        if: ${{ env.SKIP != 'yes' }}
        run: |

          sudo docker pull ghcr.io/armbian/build:$(cat build/VERSION  | cut -d"." -f1-2)"-${{ env.DOCKER_RELEASE }}-$(dpkg --print-architecture)"

      - name: Build test image
        if: ${{ env.SKIP != 'yes' }}
        run: |

          echo ::set-output name=release::${{ env.RELEASE }}

          cd build

          # framework init
          ./compile.sh \
          JUST_INIT="yes" \
          OFFLINE_WORK="yes" \
          BRANCH=current \
          RELEASE=focal \
          BUILD_MINIMAL=yes \
          BUILD_DESKTOP=no \
          KERNEL_ONLY=no \
          KERNEL_CONFIGURE=no \
          BOARD="zeropi" \
          NO_HOST_RELEASE_CHECK="yes"
         
          # change template
          sudo sed -i "s/^#DOCKER_FLAGS+=(--privileged)/DOCKER_FLAGS+=(--privileged)/" userpatches/config-docker.conf
          sudo sed -i "s/^ARM_GCC_COMPILER=.*/ARM_GCC_COMPILER=g++-${{ env.DOCKER_COMPILER }}-arm-linux-gnueabihf/" userpatches/config-docker.conf
          sudo sed -i "s/^BASE_IMAGE=.*/BASE_IMAGE=${{ env.DOCKER_DISTRO }}:${{ env.DOCKER_RELEASE }}/" userpatches/config-docker.conf
          sudo sed -i "s/^VERSION=.*/VERSION=\$(cat \$SRC\/VERSION | cut -d\".\" -f1-2)\"-\$(echo \${BASE_IMAGE} \| cut -d\":\" -f2)-\$(dpkg --print-architecture)\"/" userpatches/config-docker.conf          
          sudo sed -i 's/armbian:/ghcr.io\/armbian\/build:/g' userpatches/config-docker.conf 
          sudo sed -i "s/ -it/ -i/" userpatches/config-docker.conf
          sed -i "s/COMPRESS_OUTPUTIMAGE=.*/COMPRESS_OUTPUTIMAGE=\"no\"/" userpatches/lib.config
          
          export TERM=dumb         
          touch .ignore_changes
          ./compile.sh docker \
          JUST_INIT="no" \
          OFFLINE_WORK="no" \
          BETA=yes \
          EXPERT=yes \
          BOARD=${{ matrix.board }} \
          BRANCH=current \
          RELEASE=${{ env.RELEASE }} \
          BUILD_MINIMAL=yes \
          BUILD_DESKTOP=no \
          KERNEL_ONLY=no \
          KERNEL_CONFIGURE=prebuilt \
          COMPRESS_OUTPUTIMAGE=no \
          IGNORE_UPDATES=yes \
          REPOSITORY_INSTALL="u-boot,kernel" \
          DESKTOP_ENVIRONMENT_CONFIG_NAME="" \
          DESKTOP_ENVIRONMENT="" \
          SKIP_EXTERNAL_TOOLCHAINS=yes \

      - name: Upload artefacts        
        if: ${{ env.SKIP != 'yes' }}
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.board }}-${{ env.RELEASE }}"
          path: build/output/images/*
          if-no-files-found: error
          retention-days: 7

      - name: Runner prepare
        uses: armbian/actions/runner-prepare@main

  make-list:
    needs: gradle
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        board: [uefi-x86]
        target: ["debian:bullseye:10","debian:sid:12","ubuntu:focal:8","ubuntu:jammy:12"]

    runs-on: qemu
    name: "Test"
    steps:

      - name: Prepare
        run: |

          sudo apt-get -y install qemu-kvm libvirt-daemon-system libvirt-clients virtinst cpu-checker libguestfs-tools libosinfo-bin dnsmasq gir1.2-spiceclientgtk-3.0 virt-viewer sshpass

      - name: Read
        run: |

          RELEASE=$(echo ${{ matrix.target }} | cut -d":" -f2)
          echo ${{ matrix.target }}
          echo ${RELEASE}
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: "${{ matrix.board }}-${{ env.RELEASE }}"
          path: "${{ matrix.board }}-${{ env.RELEASE }}"
          
      - name: Remove previous if any
        run: |

          virsh destroy Armbian || true
          virsh undefine Armbian || true

      - name: Convert to QEMU and resize
        run: |

          sudo qemu-img convert -f raw -O qcow2 image.iso /var/lib/libvirt/images/image.qcow2
          sudo qemu-img resize /var/lib/libvirt/images/image.qcow2 +10G

      - name: Boot it up
        run: |

          virt-install --name Armbian --memory 2048 --vcpus 4 --disk /var/lib/libvirt/images/image.qcow2,bus=sata --import --os-variant ubuntu22.04 --network bridge=br0 --noautoconsole
          
      - name: Sleep for 2m to make sure image booted up
        uses: jakejarvis/wait-action@master
        with:
          time: '2m'
          
      - name: Find and login
        run: |
        
          # get ip
          MAC=$(sudo virsh domiflist Armbian | tail -2 | head -1 | awk '{print $NF}')
          USER_HOST=$(sudo nmap -sP 10.0.40.0/24 | grep -i "$MAC" -B 2 | head -1 | awk '{print $NF}')

          # login credentials
          USER_ROOT=root
          PASS_ROOT=testpassword
          USER_NORMAL=guest
          PASS_NORMAL=testpassword

          expect -c "
            spawn sshpass -p 1234 ssh -o "StrictHostKeyChecking=accept-new" ${USER_ROOT}@${USER_HOST}
            set timeout 120
            expect \"Create root password: \"
            send \"${PASS_ROOT}\r\"
            expect \"Repeat root password: \"
            send \"${PASS_ROOT}\r\"
            expect \"zsh\"
            send \"2\r\"
            expect \"*to abort\"
            send \"${USER_NORMAL}\r\"
            expect \"Create*password:\"
            send \"${PASS_NORMAL}\r\"
            expect \"Repeat*password:\"
            send \"${PASS_NORMAL}\r\"
            expect \"Please provide your real name: \"
            send \"${NAME_NORMAL}\r\"
            expect \"*language based on your location*\"
            send \"y\r\"
            expect eof\r"
        
          sshpass -p sendmail ssh -o "StrictHostKeyChecking=accept-new" ${USER_ROOT}@${USER_HOST} "apt-get -y update"
