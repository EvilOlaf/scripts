name: Build test images with Docker

on:

  workflow_dispatch:
  workflow_call:
    inputs:
      reference:
        required: true
        type: string
      runner:
        required: true
        type: string

jobs:  

  Distro:
    strategy:
      fail-fast: false
      matrix:
        board: [uefi-x86]
        target: ["debian:bullseye:10","debian:sid:12","ubuntu:focal:8","ubuntu:jammy:12"]
    
    name: Make
    runs-on: ubuntu-latest
    steps:

      - name: Runner prepare
        run: |
          echo "start"

  Combo:
    needs: Distro
    strategy:
      fail-fast: false
      max-parallel: 8      
      matrix:
        board: [uefi-x86]
        target: ["debian:bullseye:10","debian:sid:12","ubuntu:focal:8","ubuntu:jammy:12"]
    
    outputs:
      desktop: ${{steps.list_dirs.outputs.desktop}}
 
    runs-on: Linux
    name: "Test"    
    steps:

      - name: Checkout Armbian build script
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          path: build
          fetch-depth: '100'
          clean: false

      - name: Read
        id: list_dirs
        run: |

          RELEASE=$(echo ${{ matrix.target }} | cut -d":" -f2)
          echo ${{ matrix.target }}
          echo ${RELEASE}
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          MATRIX=$(
          set +e
          releases=($(find build/config/distributions -mindepth 1 -maxdepth 1 -type d | sed 's/.*\///' ))
          for i in ${releases[@]}
          do
          environments=($([[ -d build/config/desktop/${RELEASE}/environments ]] && ls -1 build/config/desktop/${RELEASE}/environments))
            for j in ${environments[@]}
            do
              echo  "$i:$j"
            done
          done)
          echo ::set-output name=desktop::$(for x in $(echo "${MATRIX}"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq) 
          
  Desktop:
  
      needs: [ Combo ]
      runs-on: Linux
      timeout-minutes: 480
      strategy:
        max-parallel: 16
        fail-fast: false
        matrix: 
          board: $RELEASE
          node: ${{fromJson(needs.Combo.outputs.desktop)}}

      steps:

      - uses: igorpecovnik/freespace@main
