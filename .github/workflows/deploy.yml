name: Update hash

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      uploading:
        type: string
    secrets:
      GPG_KEY1:
        required: true
      GPG_PASSPHRASE1:
        required: true
      GPG_KEY2:
        required: true
      GPG_PASSPHRASE2:
        required: true
      SCRIPTS_ACCESS_TOKEN:
        required: true
      KEY_TORRENTS:
        required: true
      KNOWN_HOSTS_UPLOAD:
        required: true
jobs:

  Hash:

    name: Update
    runs-on: fast
    if: ${{ github.repository_owner == 'Armbian' }}
    steps:

      - name: Cache Gradle packages
        uses: actions/cache@v2
        env:
          cache-name: build-kernel
        with:
          path: build-kernel
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}-linux
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}-linux            

      - name: Read value
        run: |
          echo "SKIP=$(cat build-kernel/skip 2> /dev/null || true)" >> $GITHUB_ENV
          echo ${{ env.SKIP }} 

      - name: Checkout Armbian build script

        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: false

      - name: Checkout Armbian support scripts
        if: ${{ env.SKIP != 'yes' }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/scripts
          token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
          path: scripts
          clean: true

      - name: Import GPG key
        if: ${{ env.SKIP != 'yes' }}
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_KEY2 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE2 }}
          workdir: scripts
          git-user-signingkey: true
          git-commit-gpgsign: true

      - name: Update scripts
        if: ${{ env.SKIP != 'yes' }}
        run: |

          sudo rsync -ar --remove-source-files build-kernel/*.git* scripts/hash-beta/ || true
          cd scripts
          sudo chown -R $USER:$USER .git
          if git status --porcelain | grep .; then
             git config --global user.email "info@armbian.com"
             git config --global user.name "Armbianworker"
             git config pull.rebase false
             git pull
             echo "update"
             git add .
             git commit -m "Update hashes for ${{ env.FILE_DEST }} repository"
             git push
          fi

      - name: Make board support packages
        if: ${{ env.SKIP != 'yes' }}
        run: |
            cd build              
            if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
               sudo mkdir -p cache/toolchain cache/rootfs || true
               # umount 
               sudo umount cache/toolchain || true
               # erase below
               sudo mountpoint -q cache/toolchain && sudo rm -rf cache/toolchain/*
               ! sudo mountpoint -q cache/toolchain && sudo rm -rf cache/toolchain/* && sudo mount nas:/tank/armbian/toolchain.armbian.com cache/toolchain -o rsize=32768,wsize=32768,timeo=5,retrans=2,actimeo=60,retry=15 || true
               ! sudo mountpoint -q cache/rootfs && sudo rm -rf cache/rootfs/* && sudo mount nas:/tank/armbian/dl.armbian.com/_rootfs cache/rootfs -o rsize=32768,wsize=32768,timeo=5,retrans=2,actimeo=60,retry=15 || true
            fi   
            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes          
            #./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" REPOSITORY_INSTALL="u-boot,kernel" 'prepare_host_basic'          
            rm -rf output/debs*
      
            ./compile.sh all-new-beta-bsp
            # wait until it finishes
            while :
            do
                [[ $(sudo ps -uax | grep compile.sh | wc -l) -le 1 ]] && exit
                echo "Waiting for background processes to finish."
                sleep 10
            done

      - name: Deploy to server
        if: ${{ env.SKIP != 'yes' }}
        run: |

              sudo apt-get -y -qq install lftp
              sudo chown -R $USER:$USER build/output/debs*
              lftp -u upload, -e "set net:timeout 10;set net:max-retries 16;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/debs/ debs/ ;bye" sftp://users.armbian.com
              lftp -u upload, -e "set net:timeout 10;set net:max-retries 16;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/debs-beta/ debs-beta/ ;bye" sftp://users.armbian.com

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_KEY2 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE2 }}
          workdir: build
          git-user-signingkey: true
          git-commit-gpgsign: true

      - name: Bump version
        if: ${{ env.SKIP != 'yes' }}
        run: |

          cd build
          git symbolic-ref --short -q HEAD
              if [[ "$(git symbolic-ref --short -q HEAD)" == nightly ]]; then
                CURRENT_VERSION=$(cat VERSION)
                NEW_VERSION="${CURRENT_VERSION%%-trunk}"
                if [[ $CURRENT_VERSION == *trunk* ]]; then
                  NEW_VERSION=$(echo "${CURRENT_VERSION}" | cut -d. -f1-3)"."$((${NEW_VERSION##*.} + 1))
                else
                  NEW_VERSION=$(echo "${CURRENT_VERSION}" | cut -d. -f1-2)"."$((${NEW_VERSION##*.} + 1))
                fi
                sudo git checkout -f
                sudo chown -R $USER:$USER .git
                git pull
                echo "${NEW_VERSION}" > VERSION
                git config --global user.email "info@armbian.com"
                git config --global user.name "Armbianworker"
                git add VERSION
                git commit -m "Bumping to new version" -m "" -m "Adding following kernels:" -m "$(find output/debs-beta/ -type f -name "linux-image*${CURRENT_VERSION}*.deb" -printf "%f\n" | sort)"
                git push
              fi
