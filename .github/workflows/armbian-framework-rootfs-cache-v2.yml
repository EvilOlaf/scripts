name: Build docker images

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      minimal:
       required: true
       type: string
      desktop:
       required: true
       type: string
    secrets:
      token:
        required: true
jobs:

  prepare:

    name: "Prepare JSON"
    if: ${{ github.repository_owner == 'armbian' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.json.outputs.JSON_CONTENT}}
    steps:

      - name: Checkout Armbian Framework
        uses: actions/checkout@v3.3.0
        with:
          repository: armbian/build
          ref:  main
          fetch-depth: 1

      - name: Build JSON
        id: json
        run: |
        
          releases=($(grep -rw config/distributions/*/support -ve 'eos' | rev | cut -d '/' -f 2 | rev | grep -Ev "focal|buster|kinetic"))
          arch=("amd64" "armhf" "arm64" "riscv64")
          for i in ${releases[@]}; do
              for j in ${arch[@]}; do
                 for k in ${minimal[@]}; do
                 runner_tags="ubuntu_latest"
                 [[ $j == arm64 ]] && runner_tags=aarch64
                 #if ! grep -q $j config/distributions/${i}/arhitectures; then continue; fi
                 echo "{\"release\":\"${i}\",\"minimal\":\"yes\",\"arch\":\"$j\",\"runner_tags\":\"$runner_tags\"}"
                 done
              done
          done | jq -s 
        
        
        
          # Make a list of valid pairs from our config
          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT          
          releases=($(grep -rw config/distributions/*/support -ve 'eos' | cut -d"/" -f3 | grep -Ev "focal|buster|kinetic"))
          arch=("amd64" "armhf" "arm64" "riscv64")
          for i in ${releases[@]}; do
              for j in ${arch[@]}; do
                 for k in ${minimal[@]}; do
                 runner_tags="ubuntu_latest"
                 [[ $j == arm64 ]] && runner_tags=aarch64
                 #if ! grep -q $j config/distributions/${i}/arhitectures; then continue; fi
                 echo "{\"release\":\"${i}\",\"minimal\":\"${{ inputs.minimal }}\",\"arch\":\"$j\",\"runner_tags\":\"$runner_tags\"}"
                 done
              done
          done | jq -s >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
  Docker:

    runs-on: ubuntu-latest
    name: "Docker image"
    needs: [ prepare ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix) }}

    env:
      RELEASE: "${{ matrix.release }}"
      MINIMAL: "${{ matrix.minimal }}"
      ARCH: "${{ matrix.arch }}"
      RUNNER_TAG: "${{ matrix.runner_tag }}"

    steps:

      - name: Checkout Armbian Framework
        uses: actions/checkout@v3.3.0
        with:
          repository: armbian/build
          ref:  main
          fetch-depth: 1
